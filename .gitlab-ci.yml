workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

default:
  interruptible: true

variables:
  GH_PROJECT_PATH: "MatrixAI/${CI_PROJECT_NAME}"
  GH_PROJECT_URL: "https://${GITHUB_TOKEN}@github.com/${GH_PROJECT_PATH}.git"
  GIT_SUBMODULE_STRATEGY: recursive
  # Cache .npm
  NPM_CONFIG_CACHE: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  NPM_CONFIG_PREFER_OFFLINE: "true"
  # `ts-node` has its own cache
  TS_CACHED_TRANSPILE_CACHE: "${CI_PROJECT_DIR}/tmp/ts-node-cache"
  TS_CACHED_TRANSPILE_PORTABLE: "true"
  # Homebrew cache only used by macos runner
  HOMEBREW_CACHE: "${CI_PROJECT_DIR}/tmp/Homebrew"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - ./tmp/npm/
    - ./tmp/ts-node-cache/
    # Homebrew cache is only used by the macos runner
    - ./tmp/Homebrew
    # `jest` cache is configured in jest.config.js
    - ./tmp/jest/

stages:
  - check       # Linting, unit tests
  - build       # Cross-platform library compilation, unit tests
  - integration # Cross-platform application bundling, integration tests, and pre-release
  - release     # Cross-platform distribution and deployment

image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner

check:lint:
  stage: check
  needs: []
  script:
    - >
        nix-shell --run '
        npm run lint;
        '
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test:
  stage: check
  needs: []
  script:
    - >
        nix-shell --run '
        npm run build --verbose;
        npm test -- --ci;
        '
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and staging and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(?:master|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

build:merge:
  stage: build
  needs: []
  allow_failure: true
  script:
    # Required for `gh pr create`
    - git remote add upstream "$GH_PROJECT_URL"
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        gh pr create \
          --head staging \
          --base master \
          --title "ci: merge staging to master" \
          --body "This is an automatic PR generated by the pipeline CI/CD. This will be automatically fast-forward merged if successful." \
          --assignee "@me" \
          --no-maintainer-edit \
          --repo "$GH_PROJECT_PATH" || true;
        printf "Pipeline Attempt on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
        | gh pr comment staging \
          --body-file - \
          --repo "$GH_PROJECT_PATH";
        '
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:linux:
  stage: build
  needs: []
  script:
    - >
        nix-shell --run '
        npm run build --verbose;
        npm test -- --ci;
        '
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
      # Only the build:linux preserves the dist
      - ./dist
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:windows:
  stage: build
  needs: []
  tags:
    - windows
  before_script:
    - choco install nodejs --version=16.14.2 -y
    - choco install python --version=3.9.12 -y
    - refreshenv
  script:
    - npm config set msvs_version 2019
    - npm install --ignore-scripts
    - $env:Path = "$(npm bin);" + $env:Path
    - npm run build --verbose
    - npm test -- --ci
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:macos:
  stage: build
  needs: []
  tags:
    - shared-macos-amd64
  image: macos-11-xcode-12
  variables:
    HOMEBREW_NO_INSTALL_UPGRADE: "true"
    HOMEBREW_NO_INSTALL_CLEANUP: "true"
  before_script:
    - brew install node@16
    - brew link --overwrite node@16
    - brew install python@3.9
    - brew link --overwrite python@3.9
    - hash -r
  script:
    - npm install --ignore-scripts
    - export PATH="$(npm bin):$PATH"
    - export PREBUILD_ARCH=x64+arm64
    - npm run build --verbose
    - npm test -- --ci
  artifacts:
    when: always
    reports:
      junit:
        - ./tmp/junit.xml
    paths:
      - ./prebuilds/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:prerelease:
  stage: build
  needs:
    - build:linux
    - build:windows
    - build:macos
  # Don't interrupt publishing job
  interruptible: false
  before_script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
  script:
    - echo 'Publishing library prerelease'
    - >
        nix-shell --run '
        npm publish --tag prerelease --access public;
        '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:merge:
  stage: integration
  needs:
    - build:merge
    - job: build:linux
      optional: true
    - job: build:windows
      optional: true
    - job: build:macos
      optional: true
  # Requires mutual exclusion
  resource_group: integration:merge
  allow_failure: true
  variables:
    # Ensure that CI/CD is fetching all commits
    # this is necessary to checkout origin/master
    # and to also merge origin/staging
    GIT_DEPTH: 0
  script:
    - >
        nix-shell -I nixpkgs=./pkgs.nix --packages gitAndTools.gh --run '
        printf "Pipeline Succeeded on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
        | gh pr comment staging \
          --body-file - \
          --repo "$GH_PROJECT_PATH";
        '
    - git remote add upstream "$GH_PROJECT_URL"
    - git checkout origin/master
    # Merge up to the current commit (not the latest commit)
    - git merge --ff-only "$CI_COMMIT_SHA"
    - git push upstream HEAD:master
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:distribution:
  stage: release
  needs:
    - build:linux
    - build:windows
    - build:macos
    - integration:merge
  # Don't interrupt publishing job
  interruptible: false
  before_script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
  script:
    - echo 'Publishing library'
    - >
        nix-shell --run '
        npm publish --access public;
        '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a release version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
